/*
 * AUTHOR: Edwing Gutierrez
 * COURSE: CPT 187
 * PURPOSE: The user will be able to purchase from a variety of items currently available 
 * They may purchase as many as they want as long as there is enough in stock
 * A discount may be applied for the user and a order report will be given
 * STARTDATE: 12/05/2021
 */
package edu.cpt187.gutierrez.project6;

import java.util.Scanner;

//Main Class
public class MainClass
{
		
		//class constants 
		public static final char[] MENU_CHARS = {'A', 'B', 'Q'};
		public static final String[] MENU_OPTIONS = {"Login", "Create an Account", "Return to Main Menu"};
		public static final char[] FILE_MENU_CHARS = {'A', 'B', 'R'};
		public static final String[] FILE_MENU_OPTIONS = {"Load Inventory", "Create Order", "Return to Main Menu"};
		public static final char[] SUB_MENU_CHARS = {'A', 'B', 'C', 'D'};
		public static final String INVENTORY_FILE_NAME = "MasterInventoryFile.dat";
		public static final String ACCOUNTS_FILE_NAME = "MasterUserFile.dat";

		//Main Method
		public static void main(String[] args) 
		{
			// TODO Auto-generated method stub
			
			//Scanner class 
			Scanner input = new Scanner(System.in);
			
			//Inventory class 
			Inventory currentInventory = new Inventory();
			
			//Order class 
			Order currentOrder = new Order();
			
			//WriterOrder class 
			WriteOrder orders = new WriteOrder(INVENTORY_FILE_NAME);
			
			//UserAccounts class 
			UserAccounts currentUser = new UserAccounts(ACCOUNTS_FILE_NAME);
			
			//local variables
			char menuSelection = ' ';
			String userName = "";
			
			//welcome banner 
			displayWelcomeBanner();
			
			//menu selection 
			menuSelection = validateMainMenu(input);
			
			//repetition structure for menuSelection != 'Q'
			while (menuSelection != 'Q')
			{
				currentUser.setUserAccountArrays();
				
				userName = getUserName(input);
				
				//selection structure for menuSelection != 'A'
				if (menuSelection != 'A')
				{
					currentUser.setSearchedIndex(userName);
					
					//selection structure for getSearchedIndex >= 0
					if (currentUser.getSearchedIndex() >= 0)
					{
						displayAccountResults(userName);
					}//end of if 
					else
					{
						currentUser.setWriteOneRecord(userName, getPassword(input));
						
						displayAccountResults();
					}//end of else and selection structure for getSearchedIndex >= 0
					
				}//end of if for menuSelection != 'A'
				else
				{
					currentUser.setSearchedIndex(userName, getPassword(input));
					
					//selection structure for getSearchedIndex < 0
					if (currentUser.getSearchedIndex() < 0)
					{
						displayLoginError();
					}//end of if 
					else 
					{
						menuSelection = validateFileSelection(input);
						
						while (menuSelection != 'R')
						{
							//selection structure for menuSelection == A
							if (menuSelection == 'A')
							{
								currentInventory.setLoadItems(getFileName(input));
								
								//selection structure for getRecordCount <= 0
								if (currentInventory.getRecordCount() <= 0)
								{
									displayFileError();
								}//end of if 
								else
								{
									displayRecordReport(currentInventory.getRecordCount());
								}//end of else and selection structure for getRecordCount <=0
							}//end of if
							else
							{
								currentInventory.setSearchIndex(validateSearchIndex(input));
								
								//selection structure for getItemSearchIndex < 0 
								if (currentInventory.getItemSearchIndex() < 0)
								{
									displayNotFound();
								}//end of if 
								else
								{
									currentOrder.setLastItemSelectedIndex(currentInventory.getItemSearchIndex());
									
									currentOrder.setItemID(currentInventory.getItemIDs());
									
									currentOrder.setItemPrice(currentInventory.getItemPrices());
									
									currentOrder.setItemName(currentInventory.getItemNames());
									
									currentOrder.setHowMany(validateHowMany(input));
									
									//selection structure for inStockCount < how many
									if (currentOrder.getInStockCounts(currentInventory.getInStockCounts()) < currentOrder.getHowMany())
									{
										displayOutOfStock();
									}//end of if 
									else
									{
										currentOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));
										
										currentOrder.setDiscountName(currentInventory.getDiscountNames());
										
										currentOrder.setDiscountRate(currentInventory.getDiscountRates());
										
										currentOrder.setDecreaseInStock(currentInventory);
										
										currentOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());
										
										orders.setWriteOrder(currentOrder.getItemID(), currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getTotalCost());
										
										//selection structure for order report 
										if (currentOrder.getDiscountRate() > 0.0)
										{
											displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getDiscountName(), 
													currentOrder.getDiscountRate(), currentOrder.getDiscountAmt(), currentOrder.getDiscountPrice(), currentOrder.getSubTotal(), currentOrder.getTaxRate(),
													currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCounts(currentInventory.getInStockCounts()));
										}//end of if 
										else
										{
											displayOrderReport(userName, currentOrder.getItemName(), currentOrder.getItemPrice(), currentOrder.getHowMany(), currentOrder.getSubTotal(), currentOrder.getTaxRate(),
													currentOrder.getTaxAmt(), currentOrder.getTotalCost(), currentOrder.getPrizeName(), currentOrder.getInStockCounts(currentInventory.getInStockCounts()));
										}//end of else and selection structure for order report 
									}//end of else and selection structure for getInstockCounts
								}//end of else and selection structure for getItemSearchIndex < 0
							}//end of else and selection structure for menuSelection == A
							
							menuSelection = validateFileSelection(input);
						}//end of repetition structure for menuSelection != 'R'
					}//end of else and selection structure for getSearchedIndex < 0
				}//end of else and selection structure for menuSelection != 'A'
				
				menuSelection = validateMainMenu(input);
			}//end of repetition structure for menuSelection != 'Q'
			
			currentInventory.setLoadItems(INVENTORY_FILE_NAME, orders.getRecordCount());
			
			//selection structure for final report
			if (orders.getRecordCount() > 0)
			{
				displayFinalReport(currentInventory.getItemIDs(), currentInventory.getItemNames(), currentInventory.getItemPrices(), currentInventory.getOrderQuantities(), currentInventory.getOrderTotals(),
						currentInventory.getRecordCount(), currentInventory.getGrandTotal());
			}//end of selection structure 
			
			displayFarewellMessage();
			
			input.close();


	}//END OF MAIN METHOD
		
		//VOID METHODS//
		
		//display welcome banner 
		public static void displayWelcomeBanner()
		{
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("Welcome to Wolfgang's Market!");
			System.out.println("You can browse our large inventory of supplies");
			System.out.println("Make a purchase and you may win a prize!");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		}//end of displayWelcomeBanner
		
		//display farewell message 
		public static void displayFarewellMessage()
		{
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("Thank you for shopping with us");
			System.out.println("Returning members will qualify for a discount!");
			System.out.println("We hope you shop with us again!");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		}//end of displayFarewellMessage 
		
		//display account results 
		public static void displayAccountResults()
		{
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("ACCOUNT RESULTS");
			System.out.println("New account created");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		}//end of displayAccountResults
		
		//display account results overloaded 
		public static void displayAccountResults(String borrowedUserName)
		{
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("ACCOUNT RESULTS");
			System.out.printf("%s%s%s\n", "Account not created: username, ", borrowedUserName, " ,already exists");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		}//end of displayAccountResults overloaded 
		
		//display login error 
		public static void displayLoginError()
		{
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("LOGIN ERROR");
			System.out.println("Username and/or Password is incorrect");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		}//end of displayLoginError
		
		//display record report 
		public static void displayRecordReport(int borrowedRecordCount)
		{
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("RECORD REPORT");
			System.out.printf("%-3d%s\n", borrowedRecordCount, "records processed");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		}//end of displayRecordReport
		
		
		//display out of stock message 
		public static void displayOutOfStock()
		{
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("OUT OF STOCK ERROR");
			System.out.println("The quantity entered is greater than the quantity in-stock");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		}//end of displayOutOfStock 
		
		//display file error 
		public static void displayFileError()
		{
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("FILE ERROR");
			System.out.println("The file named was not found or could not be opened");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		}//end of displayFileError
		
		//display not found message 
		public static void displayNotFound()
		{
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("NOT FOUND ERROR");
			System.out.println("The search value entered was not found");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		}//end of displayNotFound
		
		//display main menu
		public static void displayMainMenu()
		{
			int localIndex = 0;
			
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("MAIN MENU");
			
			//repetition structure to display menu options 
			while (localIndex < MENU_CHARS.length)
			{
				System.out.printf("%-2s%-4s%s\n", MENU_CHARS[localIndex], "for", MENU_OPTIONS[localIndex]);
				localIndex++;
			}//end of repetition structure 
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			//menu prompt
			System.out.print("Enter your selection here:");
		}//end of displayMainMenu
		
		//display file menu
		public static void displayFileMenu()
		{
			int localIndex = 0;
			
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("FILE MENU");
			
			//Repetition structure to display file options 
			while (localIndex < FILE_MENU_CHARS.length)
			{
				System.out.printf("%-2s%-4s%s\n", FILE_MENU_CHARS[localIndex], "for", FILE_MENU_OPTIONS[localIndex]);
				localIndex++;
			}//end of repetition structure 
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.print("Enter your selection here:");
		}//end of displayFileMenu
		
		//display discount menu 
		public static void displayDiscountMenu(String[] borrowedDiscountNames, double[] borrowedDiscountRates)
		{
			int localIndex = 0;
			
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("DISCOUNT MENU");
			
			//repetition structure 
			while (localIndex < borrowedDiscountNames.length)
			{
				System.out.printf("%-2s%-4s%-15s%5.1f%s\n", SUB_MENU_CHARS[localIndex], "for", borrowedDiscountNames[localIndex], (borrowedDiscountRates[localIndex]*100), "%");
				localIndex++;
			}//end of repetition structure 
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.print("Enter your selection here:");
		}//end of displayDiscountMenu
		
		//display order report
		public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany,  double borrowedSubTotal, 
				double borrowedTaxRate, double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
		{
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("ORDER REPORT");
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.printf("%-20s%s\n", "Customer Name:", borrowedUserName);
			
			System.out.printf("\n%-20s%s\n", "Item Name:", borrowedItemName);
			System.out.printf("%-20s%-3s%.2f\n", "Item Price", "$", borrowedItemPrice);
			
			System.out.printf("\n%-26s%d\n", "Quantity:", borrowedHowMany);
			
			System.out.printf("\n%-20s%-3s%.2f\n", "Subtotal:", "$", borrowedSubTotal);
			System.out.printf("%-23s%.1f%s\n", "Tax Rate:", (borrowedTaxRate*100), "%" );
			System.out.printf("%-20s%-3s%-4.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
			
			System.out.printf("\n%-20s%-3s%.2f\n", "Order Total:", "$", borrowedTotalCost);
			
			System.out.printf("\n%-20s%s\n", "Prize:", borrowedPrizeName);
			
			System.out.printf("\n%s%d%s\n", "Buy more now:Only ", borrowedInStockCount, " left in stock!");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		}//end of overloaded displayOrderReport
		
		//display overloaded order report 
		public static void displayOrderReport(String borrowedUserName, String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, String borrowedDiscountName,
				double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, double borrowedTaxAmt,
				double borrowedTotalCost, String borrowedPrizeName, int borrowedInStockCount)
		{
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("ORDER REPORT");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.printf("%-20s%s\n", "Customer Name:", borrowedUserName);
			
			System.out.printf("\n%-20s%s\n", "Item Name:", borrowedItemName);
			System.out.printf("%-20s%-3s%.2f\n", "Item Price", "$", borrowedItemPrice);
			
			System.out.printf("\n%-20s%s\n", "Discount Name:", borrowedDiscountName);
			System.out.printf("%-22s%-6.1f%s\n", "Discount Rate:", (borrowedDiscountRate*100), "%");
			System.out.printf("%-20s%-3s%.2f\n", "Discount Amount:", "$", borrowedDiscountAmt);
			System.out.printf("%-20s%-3s%.2f\n", "Discount Price:", "$", borrowedDiscountPrice);
			
			System.out.printf("\n%-26s%d\n", "Quantity:", borrowedHowMany);
			
			System.out.printf("\n%-20s%-3s%.2f\n", "Subtotal:", "$", borrowedSubTotal);
			System.out.printf("%-23s%-5.1f%s\n", "Tax Rate:", (borrowedTaxRate*100), "%" );
			System.out.printf("%-20s%-3s%.2f\n", "Tax Amount:", "$", borrowedTaxAmt);
			
			System.out.printf("\n%-20s%-3s%.2f\n", "Order Total:", "$", borrowedTotalCost);
			
			System.out.printf("\n%-20s%s\n", "Prize:", borrowedPrizeName);
			
			System.out.printf("\n%s%d%s\n", "Buy more now: Only ", borrowedInStockCount, " left in stock!");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
		}//end of overloaded displayOrderReport
		
		//display final report 
		public static void displayFinalReport(int[] borrowedItemIDs, String[] borrowedItemNames, double[] borrowedItemPrices, int[] borrowedOrderQuantities, double[] borrowedOrderTotals, int borrowedRecordCount, double borrowedGrandTotal )
		{
			int localIndex = 0;
			
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.println("FINAL REPORT");
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.printf("%-5s%-25s%-8s%-6s%s\n", "ID", "NAME", "PRICE", "QTY", "TOTAL");
			
			while (localIndex < borrowedRecordCount)
			{
				System.out.printf("%-5d%-25s%-2s%-8.2f%-4d%-2s%.2f\n", borrowedItemIDs[localIndex], borrowedItemNames[localIndex], "$", borrowedItemPrices[localIndex], borrowedOrderQuantities[localIndex], "$", borrowedOrderTotals[localIndex]);
				localIndex++;
			}//end of repetition structure 
			
			System.out.println("\nGRAND TOTAL");
			System.out.printf("%-2s%.2f\n", "$", borrowedGrandTotal);
			System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");

		}//end of displayFinalReport
		
		
		//VR METHODS SECTION//
		
		//get userName
		public static String getUserName(Scanner borrowedInput)
		{
			String localUserName = "";
			
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.print("Enter your name here:");
			
			//assignment statement 
			localUserName = borrowedInput.next();
			
			return localUserName;
		}//end of getUserName
		
		//get how many 
		public static String validateHowMany(Scanner borrowedInput)
		{
			String localHowMany = "";
			
			System.out.println("\nEnter the quantity here:");
			localHowMany = borrowedInput.next();
			
			while (Integer.parseInt(localHowMany) <= 0)
			{
				System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
				System.out.println("ERROR: The quantity entered is incorrect");
				System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
				
				System.out.print("\nEnter the quantity here:");
				localHowMany = borrowedInput.next();

			}//end of validation loop 
			return localHowMany;
		}//end of getHowMany
		
		//VR method to get password
		public static String getPassword(Scanner borrowedInput)
		{
			String localPassword = "";
			
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.print("Enter your password:");
			localPassword = borrowedInput.next();
			
			return localPassword;
		}//end of get password 
		
		//get file name 
		public static String getFileName(Scanner borrowedInput)
		{
			String localFileName = "";
			
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.print("Enter the file name with extension (i.e. file.txt):");
			localFileName = borrowedInput.next();
			
			return localFileName;
		}//end of getFileName
		
		//VR method for search value 
		public static int validateSearchIndex(Scanner borrowedInput)
		{
			int localIndex = 0;
			
			System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
			System.out.print("Enter the search value:");
			localIndex = borrowedInput.nextInt();
			
			while (localIndex <= 0)
			{
				System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
				System.out.print("ERROR: The value entered is invalid");
				System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");

				System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
				System.out.print("Enter the search value:");
				localIndex = borrowedInput.nextInt();
			}//end of validation loop
			return localIndex;
		}//end of validateSearchValue
		
		//VR method to validate main menu
		public static char validateMainMenu(Scanner borrowedInput)
		{
			char localMenuSelection = ' ';
			
			displayMainMenu();
			localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
			
			while (localMenuSelection != 'A' && localMenuSelection != 'B' && localMenuSelection != 'Q')
			{
				System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
				System.out.println("ERROR: The Selection made is invalid");
				System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");

				displayMainMenu();
				localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
			}//end of validation loop 
			
			return localMenuSelection;
		}//end of validateMainMenu
		
		//VR method to validate file menu 
		public static char validateFileSelection(Scanner borrowedInput)
		{
			char localMenuSelection = ' ';
			
			displayFileMenu();
			localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);
			
			while (localMenuSelection != 'A' && localMenuSelection != 'B' && localMenuSelection != 'R')
			{
				System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
				System.out.println("ERROR: The selection made is invalid");
				System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
				
				displayFileMenu();
				localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);

			}//end of validation loop
			return localMenuSelection;
		}//end of validateFileMenu
		
		//VR method to validate discount menu 
		public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates )
		{
			char localDiscountType = ' ';
			
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localDiscountType = borrowedInput.next().toUpperCase().charAt(0);
			
			while (localDiscountType != 'A' && localDiscountType != 'B' && localDiscountType != 'C' && localDiscountType != 'D')
			{
				System.out.println("\n~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");
				System.out.println("ERROR: The selection made is invalid");
				System.out.println("~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~ ~~~~~");

				displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
				localDiscountType = borrowedInput.next().toUpperCase().charAt(0);
			}//end of validation loop 
			return localDiscountType;
		}//end of validateDiscountMenu

}//END OF MAIN CLASS
